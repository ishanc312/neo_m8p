
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ac  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800323c  0800323c  0000423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  00005018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800327c  0800327c  00005018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800327c  0800327c  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800327c  0800327c  0000427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003280  08003280  00004280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003284  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  20000018  0800329c  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  0800329c  000059b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088dc  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9f  00000000  00000000  0000d924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0000f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b0  00000000  00000000  0000fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd9c  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaee  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde82  00000000  00000000  0003ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8b8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d4  00000000  00000000  000f8bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000fafa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003224 	.word	0x08003224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08003224 	.word	0x08003224

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_CAN1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000848:	2201      	movs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_CAN1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_CAN1_Init+0x64>)
 800085a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800085e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000862:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000866:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <MX_CAN1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_CAN1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_CAN1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_CAN1_Init+0x64>)
 800088e:	f000 fc25 	bl	80010dc <HAL_CAN_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f9f4 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000034 	.word	0x20000034
 80008a4:	40006400 	.word	0x40006400

080008a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <HAL_CAN_MspInit+0x80>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d129      	bne.n	800091e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a11      	ldr	r2, [pc, #68]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_CAN_MspInit+0x84>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800090c:	2309      	movs	r3, #9
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f000 fed5 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40006400 	.word	0x40006400
 800092c:	40021000 	.word	0x40021000

08000930 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_GPIO_Init+0x74>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a16      	ldr	r2, [pc, #88]	@ (80009a4 <MX_GPIO_Init+0x74>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_GPIO_Init+0x74>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_GPIO_Init+0x74>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <MX_GPIO_Init+0x74>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_GPIO_Init+0x74>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0x78>)
 800097c:	f001 f80e 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000980:	2340      	movs	r3, #64	@ 0x40
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_GPIO_Init+0x78>)
 8000998:	f000 fe96 	bl	80016c8 <HAL_GPIO_Init>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400

080009ac <formNE_Vel_Frame>:
void formDHeading_Frame();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void formNE_Vel_Frame() {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	// North Velocity
	NE_Vel_Tx[0] = rxData[54];
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009b2:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009b8:	701a      	strb	r2, [r3, #0]
	NE_Vel_Tx[1] = rxData[55];
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009bc:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009c2:	705a      	strb	r2, [r3, #1]
	NE_Vel_Tx[2] = rxData[56];
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009c6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009cc:	709a      	strb	r2, [r3, #2]
	NE_Vel_Tx[3] = rxData[57];
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009d0:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009d6:	70da      	strb	r2, [r3, #3]

	// East Velocity
	NE_Vel_Tx[4] = rxData[58];
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009da:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009e0:	711a      	strb	r2, [r3, #4]
	NE_Vel_Tx[5] = rxData[59];
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009e4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009ea:	715a      	strb	r2, [r3, #5]
	NE_Vel_Tx[6] = rxData[60];
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009ee:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009f4:	719a      	strb	r2, [r3, #6]
	NE_Vel_Tx[7] = rxData[61];
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <formNE_Vel_Frame+0x60>)
 80009f8:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <formNE_Vel_Frame+0x64>)
 80009fe:	71da      	strb	r2, [r3, #7]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000c0 	.word	0x200000c0
 8000a10:	20000938 	.word	0x20000938

08000a14 <formDHeading_Frame>:

void formDHeading_Frame() {
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	// Down Velocity
	DHeading_Tx[0] = rxData[62];
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a1a:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a20:	701a      	strb	r2, [r3, #0]
	DHeading_Tx[1] = rxData[63];
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a24:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a2a:	705a      	strb	r2, [r3, #1]
	DHeading_Tx[2] = rxData[64];
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a2e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a34:	709a      	strb	r2, [r3, #2]
	DHeading_Tx[3] = rxData[65];
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a38:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a3e:	70da      	strb	r2, [r3, #3]

	// Heading Direction (need to scale by 1e-5)
	DHeading_Tx[4] = rxData[70];
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a42:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a48:	711a      	strb	r2, [r3, #4]
	DHeading_Tx[5] = rxData[71];
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a4c:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a52:	715a      	strb	r2, [r3, #5]
	DHeading_Tx[6] = rxData[72];
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a56:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a5c:	719a      	strb	r2, [r3, #6]
	DHeading_Tx[7] = rxData[73];
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <formDHeading_Frame+0x60>)
 8000a60:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <formDHeading_Frame+0x64>)
 8000a66:	71da      	strb	r2, [r3, #7]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000c0 	.word	0x200000c0
 8000a78:	20000940 	.word	0x20000940

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fa92 	bl	8000faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f8b7 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f7ff ff51 	bl	8000930 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000a8e:	f000 f97b 	bl	8000d88 <MX_SPI3_Init>
  MX_CAN1_Init();
 8000a92:	f7ff fed3 	bl	800083c <MX_CAN1_Init>

  HAL_CAN_Start(&hcan1);
 8000a96:	4845      	ldr	r0, [pc, #276]	@ (8000bac <main+0x130>)
 8000a98:	f000 fc1b 	bl	80012d2 <HAL_CAN_Start>
  /* USER CODE BEGIN 2 */

  memset(txData, 0xFF, len);
 8000a9c:	4b44      	ldr	r3, [pc, #272]	@ (8000bb0 <main+0x134>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	21ff      	movs	r1, #255	@ 0xff
 8000aa4:	4843      	ldr	r0, [pc, #268]	@ (8000bb4 <main+0x138>)
 8000aa6:	f002 fb91 	bl	80031cc <memset>
  memset(dummyTx, 0xFF, dummyLen);
 8000aaa:	4b43      	ldr	r3, [pc, #268]	@ (8000bb8 <main+0x13c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	21ff      	movs	r1, #255	@ 0xff
 8000ab2:	4842      	ldr	r0, [pc, #264]	@ (8000bbc <main+0x140>)
 8000ab4:	f002 fb8a 	bl	80031cc <memset>

  NE_Vel_CTXHeader.IDE = CAN_ID_STD;
 8000ab8:	4b41      	ldr	r3, [pc, #260]	@ (8000bc0 <main+0x144>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  NE_Vel_CTXHeader.StdId = NE_Vel_ID;
 8000abe:	4b40      	ldr	r3, [pc, #256]	@ (8000bc0 <main+0x144>)
 8000ac0:	f240 7271 	movw	r2, #1905	@ 0x771
 8000ac4:	601a      	str	r2, [r3, #0]
  NE_Vel_CTXHeader.RTR = CAN_RTR_DATA;
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <main+0x144>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  NE_Vel_CTXHeader.DLC = 8;
 8000acc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc0 <main+0x144>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	611a      	str	r2, [r3, #16]

  DHeading_CTXHeader.IDE = CAN_ID_STD;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc4 <main+0x148>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  DHeading_CTXHeader.StdId = DHeading_ID;
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc4 <main+0x148>)
 8000ada:	f240 7281 	movw	r2, #1921	@ 0x781
 8000ade:	601a      	str	r2, [r3, #0]
  DHeading_CTXHeader.RTR = CAN_RTR_DATA;
 8000ae0:	4b38      	ldr	r3, [pc, #224]	@ (8000bc4 <main+0x148>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  DHeading_CTXHeader.DLC = 8;
 8000ae6:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <main+0x148>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2140      	movs	r1, #64	@ 0x40
 8000af0:	4835      	ldr	r0, [pc, #212]	@ (8000bc8 <main+0x14c>)
 8000af2:	f000 ff53 	bl	800199c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, pollPVT, 8, HAL_MAX_DELAY);
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afa:	2208      	movs	r2, #8
 8000afc:	4933      	ldr	r1, [pc, #204]	@ (8000bcc <main+0x150>)
 8000afe:	4834      	ldr	r0, [pc, #208]	@ (8000bd0 <main+0x154>)
 8000b00:	f001 fe6b 	bl	80027da <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2140      	movs	r1, #64	@ 0x40
 8000b08:	482f      	ldr	r0, [pc, #188]	@ (8000bc8 <main+0x14c>)
 8000b0a:	f000 ff47 	bl	800199c <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8000b0e:	2064      	movs	r0, #100	@ 0x64
 8000b10:	f000 fac0 	bl	8001094 <HAL_Delay>

	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2140      	movs	r1, #64	@ 0x40
 8000b18:	482b      	ldr	r0, [pc, #172]	@ (8000bc8 <main+0x14c>)
 8000b1a:	f000 ff3f 	bl	800199c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi3, txData, rxData, len, HAL_MAX_DELAY);
 8000b1e:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <main+0x134>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd4 <main+0x158>)
 8000b2a:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <main+0x138>)
 8000b2c:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <main+0x154>)
 8000b2e:	f001 ffca 	bl	8002ac6 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2140      	movs	r1, #64	@ 0x40
 8000b36:	4824      	ldr	r0, [pc, #144]	@ (8000bc8 <main+0x14c>)
 8000b38:	f000 ff30 	bl	800199c <HAL_GPIO_WritePin>

	  status = PVT_PARSE(rxData, coords);
 8000b3c:	4926      	ldr	r1, [pc, #152]	@ (8000bd8 <main+0x15c>)
 8000b3e:	4825      	ldr	r0, [pc, #148]	@ (8000bd4 <main+0x158>)
 8000b40:	f000 f8a6 	bl	8000c90 <PVT_PARSE>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a25      	ldr	r2, [pc, #148]	@ (8000bdc <main+0x160>)
 8000b48:	6013      	str	r3, [r2, #0]

	  if (status == 1) {
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <main+0x160>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d117      	bne.n	8000b82 <main+0x106>
		  formNE_Vel_Frame();
 8000b52:	f7ff ff2b 	bl	80009ac <formNE_Vel_Frame>
		  formDHeading_Frame();
 8000b56:	f7ff ff5d 	bl	8000a14 <formDHeading_Frame>

		  NE_Vel_Status = HAL_CAN_AddTxMessage(&hcan1, &NE_Vel_CTXHeader, NE_Vel_Tx, &mailbox);
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <main+0x164>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <main+0x168>)
 8000b5e:	4918      	ldr	r1, [pc, #96]	@ (8000bc0 <main+0x144>)
 8000b60:	4812      	ldr	r0, [pc, #72]	@ (8000bac <main+0x130>)
 8000b62:	f000 fbfa 	bl	800135a <HAL_CAN_AddTxMessage>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <main+0x16c>)
 8000b6c:	701a      	strb	r2, [r3, #0]
		  DHeading_Status = HAL_CAN_AddTxMessage(&hcan1, &DHeading_CTXHeader, DHeading_Tx, &mailbox);
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <main+0x164>)
 8000b70:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <main+0x170>)
 8000b72:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <main+0x148>)
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <main+0x130>)
 8000b76:	f000 fbf0 	bl	800135a <HAL_CAN_AddTxMessage>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <main+0x174>)
 8000b80:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2140      	movs	r1, #64	@ 0x40
 8000b86:	4810      	ldr	r0, [pc, #64]	@ (8000bc8 <main+0x14c>)
 8000b88:	f000 ff08 	bl	800199c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi3, dummyTx, dummyRx, 1000, HAL_MAX_DELAY);
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <main+0x178>)
 8000b98:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <main+0x140>)
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <main+0x154>)
 8000b9c:	f001 ff93 	bl	8002ac6 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	4808      	ldr	r0, [pc, #32]	@ (8000bc8 <main+0x14c>)
 8000ba6:	f000 fef9 	bl	800199c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(NEO_CS_PORT, NEO_CS_PIN, GPIO_PIN_RESET);
 8000baa:	e79f      	b.n	8000aec <main+0x70>
 8000bac:	20000034 	.word	0x20000034
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	2000005c 	.word	0x2000005c
 8000bb8:	2000000a 	.word	0x2000000a
 8000bbc:	20000124 	.word	0x20000124
 8000bc0:	20000900 	.word	0x20000900
 8000bc4:	2000091c 	.word	0x2000091c
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	2000094c 	.word	0x2000094c
 8000bd4:	200000c0 	.word	0x200000c0
 8000bd8:	200008f4 	.word	0x200008f4
 8000bdc:	200008fc 	.word	0x200008fc
 8000be0:	20000948 	.word	0x20000948
 8000be4:	20000938 	.word	0x20000938
 8000be8:	20000918 	.word	0x20000918
 8000bec:	20000940 	.word	0x20000940
 8000bf0:	20000934 	.word	0x20000934
 8000bf4:	2000050c 	.word	0x2000050c

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	@ 0x58
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2244      	movs	r2, #68	@ 0x44
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fae0 	bl	80031cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1e:	f000 fee3 	bl	80019e8 <HAL_PWREx_ControlVoltageScaling>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c28:	f000 f82c 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000c38:	2370      	movs	r3, #112	@ 0x70
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 ff25 	bl	8001a94 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c50:	f000 f818 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fb25 	bl	80022bc <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c78:	f000 f804 	bl	8000c84 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3758      	adds	r7, #88	@ 0x58
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <PVT_PARSE>:
		*ck_a = (*ck_a + payload[i]) % 0xFF;
		*ck_b = (*ck_a + *ck_b) % 0xFF;
	}
}

int PVT_PARSE(uint8_t *rxData, float *data) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	int status = -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c9e:	61fb      	str	r3, [r7, #28]
	if (rxData[0] == 0xB5 && rxData[1] == 0x62 && rxData[2] == 0x01
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2bb5      	cmp	r3, #181	@ 0xb5
 8000ca6:	d117      	bne.n	8000cd8 <PVT_PARSE+0x48>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b62      	cmp	r3, #98	@ 0x62
 8000cb0:	d112      	bne.n	8000cd8 <PVT_PARSE+0x48>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d10d      	bne.n	8000cd8 <PVT_PARSE+0x48>
			&& rxData[3] == 0x07) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d108      	bne.n	8000cd8 <PVT_PARSE+0x48>
		// Ensure a correct header
		status = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
		if (rxData[26] > 0) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	331a      	adds	r3, #26
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <PVT_PARSE+0x48>
			status = 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
			// Means the satellite got a fix!
		}
	}

	int32_t unscaled_lon =
	    ((uint32_t)rxData[30])       |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	331e      	adds	r3, #30
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
	    ((uint32_t)rxData[31] << 8)  |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	331f      	adds	r3, #31
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	021b      	lsls	r3, r3, #8
	    ((uint32_t)rxData[30])       |
 8000ce8:	431a      	orrs	r2, r3
	    ((uint32_t)rxData[32] << 16) |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3320      	adds	r3, #32
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	041b      	lsls	r3, r3, #16
	    ((uint32_t)rxData[31] << 8)  |
 8000cf2:	431a      	orrs	r2, r3
	    ((uint32_t)rxData[33] << 24);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3321      	adds	r3, #33	@ 0x21
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	061b      	lsls	r3, r3, #24
	    ((uint32_t)rxData[32] << 16) |
 8000cfc:	4313      	orrs	r3, r2
	int32_t unscaled_lon =
 8000cfe:	61bb      	str	r3, [r7, #24]
	float lon = unscaled_lon * 1e-7;
 8000d00:	69b8      	ldr	r0, [r7, #24]
 8000d02:	f7ff fce1 	bl	80006c8 <__aeabi_i2d>
 8000d06:	a31e      	add	r3, pc, #120	@ (adr r3, 8000d80 <PVT_PARSE+0xf0>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fa60 	bl	80001d0 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4610      	mov	r0, r2
 8000d16:	4619      	mov	r1, r3
 8000d18:	f7ff fd40 	bl	800079c <__aeabi_d2f>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	617b      	str	r3, [r7, #20]
	int32_t unscaled_lat =
		    ((uint32_t)rxData[34])       |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3322      	adds	r3, #34	@ 0x22
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
		    ((uint32_t)rxData[35] << 8)  |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3323      	adds	r3, #35	@ 0x23
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	021b      	lsls	r3, r3, #8
		    ((uint32_t)rxData[34])       |
 8000d30:	431a      	orrs	r2, r3
		    ((uint32_t)rxData[36] << 16) |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3324      	adds	r3, #36	@ 0x24
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	041b      	lsls	r3, r3, #16
		    ((uint32_t)rxData[35] << 8)  |
 8000d3a:	431a      	orrs	r2, r3
		    ((uint32_t)rxData[37] << 24);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3325      	adds	r3, #37	@ 0x25
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	061b      	lsls	r3, r3, #24
		    ((uint32_t)rxData[36] << 16) |
 8000d44:	4313      	orrs	r3, r2
	int32_t unscaled_lat =
 8000d46:	613b      	str	r3, [r7, #16]
	float lat = unscaled_lat * 1e-7;
 8000d48:	6938      	ldr	r0, [r7, #16]
 8000d4a:	f7ff fcbd 	bl	80006c8 <__aeabi_i2d>
 8000d4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8000d80 <PVT_PARSE+0xf0>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fa3c 	bl	80001d0 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff fd1c 	bl	800079c <__aeabi_d2f>
 8000d64:	4603      	mov	r3, r0
 8000d66:	60fb      	str	r3, [r7, #12]
	data[0] = lat;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
	data[1] = lon;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3304      	adds	r3, #4
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]

	return status;
 8000d76:	69fb      	ldr	r3, [r7, #28]

}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	9abcaf48 	.word	0x9abcaf48
 8000d84:	3e7ad7f2 	.word	0x3e7ad7f2

08000d88 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <MX_SPI3_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000da2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000da6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_SPI3_Init+0x74>)
 8000de8:	f001 fc54 	bl	8002694 <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f7ff ff47 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000094c 	.word	0x2000094c
 8000e00:	40003c00 	.word	0x40003c00

08000e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <HAL_SPI_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d127      	bne.n	8000e76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e56:	2338      	movs	r3, #56	@ 0x38
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e66:	2306      	movs	r3, #6
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e72:	f000 fc29 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40003c00 	.word	0x40003c00
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f893 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 f929 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff fd77 	bl	8000a7c <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f9c:	08003284 	.word	0x08003284
  ldr r2, =_sbss
 8000fa0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fa4:	200009b4 	.word	0x200009b4

08000fa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_IRQHandler>

08000faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fb53 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f000 f80e 	bl	8000fdc <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	e001      	b.n	8000fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fcc:	f7ff ff5e 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_InitTick+0x6c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d023      	beq.n	8001038 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_InitTick+0x70>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_InitTick+0x6c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fb51 	bl	80016ae <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10f      	bne.n	8001032 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d809      	bhi.n	800102c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001020:	f000 fb29 	bl	8001676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001024:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_InitTick+0x74>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e007      	b.n	800103c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e004      	b.n	800103c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e001      	b.n	800103c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000014 	.word	0x20000014
 800104c:	2000000c 	.word	0x2000000c
 8001050:	20000010 	.word	0x20000010

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000014 	.word	0x20000014
 8001078:	200009b0 	.word	0x200009b0

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200009b0 	.word	0x200009b0

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000014 	.word	0x20000014

080010dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0ed      	b.n	80012ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fbd4 	bl	80008a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ffb4 	bl	800107c <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ffb0 	bl	800107c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0c5      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e5      	beq.n	8001118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0202 	bic.w	r2, r2, #2
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff ff8e 	bl	800107c <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001162:	e012      	b.n	800118a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001164:	f7ff ff8a 	bl	800107c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d90b      	bls.n	800118a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e09f      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e5      	bne.n	8001164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e5b      	ldrb	r3, [r3, #25]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e9b      	ldrb	r3, [r3, #26]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0220 	bic.w	r2, r2, #32
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7edb      	ldrb	r3, [r3, #27]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0210 	bic.w	r2, r2, #16
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7f1b      	ldrb	r3, [r3, #28]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0208 	bic.w	r2, r2, #8
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f5b      	ldrb	r3, [r3, #29]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	ea42 0103 	orr.w	r1, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d12e      	bne.n	8001344 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012fe:	f7ff febd 	bl	800107c <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001304:	e012      	b.n	800132c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001306:	f7ff feb9 	bl	800107c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d90b      	bls.n	800132c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2205      	movs	r2, #5
 8001324:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e012      	b.n	8001352 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1e5      	bne.n	8001306 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	e006      	b.n	8001352 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
  }
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800135a:	b480      	push	{r7}
 800135c:	b089      	sub	sp, #36	@ 0x24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d003      	beq.n	8001386 <HAL_CAN_AddTxMessage+0x2c>
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	2b02      	cmp	r3, #2
 8001382:	f040 80ad 	bne.w	80014e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10a      	bne.n	80013a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8095 	beq.w	80014d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	0e1b      	lsrs	r3, r3, #24
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	409a      	lsls	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	6809      	ldr	r1, [r1, #0]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3318      	adds	r3, #24
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e00f      	b.n	80013fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ee:	68f9      	ldr	r1, [r7, #12]
 80013f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3318      	adds	r3, #24
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3318      	adds	r3, #24
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	3304      	adds	r3, #4
 8001410:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	7d1b      	ldrb	r3, [r3, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d111      	bne.n	800143e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3318      	adds	r3, #24
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3318      	adds	r3, #24
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3307      	adds	r3, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	061a      	lsls	r2, r3, #24
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3306      	adds	r3, #6
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3305      	adds	r3, #5
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4313      	orrs	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	3204      	adds	r2, #4
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4610      	mov	r0, r2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	ea43 0200 	orr.w	r2, r3, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3303      	adds	r3, #3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	061a      	lsls	r2, r3, #24
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3302      	adds	r3, #2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4313      	orrs	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	ea43 0200 	orr.w	r2, r3, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3318      	adds	r3, #24
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3318      	adds	r3, #24
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00e      	b.n	80014ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e006      	b.n	80014ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	@ (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff47 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff5c 	bl	8001544 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffb0 	bl	800161c <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e148      	b.n	800196a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 813a 	beq.w	8001964 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8094 	beq.w	8001964 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b52      	ldr	r3, [pc, #328]	@ (8001988 <HAL_GPIO_Init+0x2c0>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001840:	4a51      	ldr	r2, [pc, #324]	@ (8001988 <HAL_GPIO_Init+0x2c0>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6613      	str	r3, [r2, #96]	@ 0x60
 8001848:	4b4f      	ldr	r3, [pc, #316]	@ (8001988 <HAL_GPIO_Init+0x2c0>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a4d      	ldr	r2, [pc, #308]	@ (800198c <HAL_GPIO_Init+0x2c4>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_Init+0x1d4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a43      	ldr	r2, [pc, #268]	@ (8001990 <HAL_GPIO_Init+0x2c8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_Init+0x1d0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a42      	ldr	r2, [pc, #264]	@ (8001994 <HAL_GPIO_Init+0x2cc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001890:	2302      	movs	r3, #2
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 8001894:	2307      	movs	r3, #7
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 800189c:	2300      	movs	r3, #0
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ae:	4937      	ldr	r1, [pc, #220]	@ (800198c <HAL_GPIO_Init+0x2c4>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190a:	4a23      	ldr	r2, [pc, #140]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001934:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_GPIO_Init+0x2d0>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aeaf 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40007000 	.word	0x40007000

080019e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019f6:	d130      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a04:	d038      	beq.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2232      	movs	r2, #50	@ 0x32
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2c:	e002      	b.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a40:	d102      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a54:	d110      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e00f      	b.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d007      	beq.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a70:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	431bde83 	.word	0x431bde83

08001a94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f000 bc02 	b.w	80022ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa8:	4b96      	ldr	r3, [pc, #600]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab2:	4b94      	ldr	r3, [pc, #592]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80e4 	beq.w	8001c92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4c>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	f040 808b 	bne.w	8001bee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	f040 8087 	bne.w	8001bee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae0:	4b88      	ldr	r3, [pc, #544]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_OscConfig+0x64>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e3d9      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1a      	ldr	r2, [r3, #32]
 8001afc:	4b81      	ldr	r3, [pc, #516]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_RCC_OscConfig+0x7e>
 8001b08:	4b7e      	ldr	r3, [pc, #504]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b10:	e005      	b.n	8001b1e <HAL_RCC_OscConfig+0x8a>
 8001b12:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d223      	bcs.n	8001b6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd54 	bl	80025d4 <RCC_SetFlashLatencyFromMSIRange>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e3ba      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b36:	4b73      	ldr	r3, [pc, #460]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a72      	ldr	r2, [pc, #456]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b70      	ldr	r3, [pc, #448]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	496d      	ldr	r1, [pc, #436]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b54:	4b6b      	ldr	r3, [pc, #428]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	4968      	ldr	r1, [pc, #416]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	e025      	b.n	8001bb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6a:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4960      	ldr	r1, [pc, #384]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b88:	4b5e      	ldr	r3, [pc, #376]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	495b      	ldr	r1, [pc, #364]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fd14 	bl	80025d4 <RCC_SetFlashLatencyFromMSIRange>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e37a      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb6:	f000 fc81 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b51      	ldr	r3, [pc, #324]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4950      	ldr	r1, [pc, #320]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8001d0c <HAL_RCC_OscConfig+0x278>)
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d10 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f9fe 	bl	8000fdc <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d052      	beq.n	8001c90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	e35e      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d032      	beq.n	8001c5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bf6:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a42      	ldr	r2, [pc, #264]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa3b 	bl	800107c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fa37 	bl	800107c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e347      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1c:	4b39      	ldr	r3, [pc, #228]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a35      	ldr	r2, [pc, #212]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b33      	ldr	r3, [pc, #204]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4930      	ldr	r1, [pc, #192]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	492b      	ldr	r1, [pc, #172]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e01a      	b.n	8001c92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa08 	bl	800107c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c70:	f7ff fa04 	bl	800107c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e314      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1dc>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d073      	beq.n	8001d86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x21c>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d063      	beq.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d15f      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e2f1      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x24c>
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e025      	b.n	8001d2c <HAL_RCC_OscConfig+0x298>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce8:	d114      	bne.n	8001d14 <HAL_RCC_OscConfig+0x280>
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a02      	ldr	r2, [pc, #8]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x298>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	0800323c 	.word	0x0800323c
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	20000010 	.word	0x20000010
 8001d14:	4ba0      	ldr	r3, [pc, #640]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9f      	ldr	r2, [pc, #636]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b9d      	ldr	r3, [pc, #628]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a9c      	ldr	r2, [pc, #624]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9a2 	bl	800107c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f99e 	bl	800107c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e2ae      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4e:	4b92      	ldr	r3, [pc, #584]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2a8>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f98e 	bl	800107c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f98a 	bl	800107c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e29a      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d76:	4b88      	ldr	r3, [pc, #544]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2d0>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d060      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x310>
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d119      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d116      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da4:	4b7c      	ldr	r3, [pc, #496]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_OscConfig+0x328>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e277      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbc:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	4973      	ldr	r1, [pc, #460]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd0:	e040      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d023      	beq.n	8001e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dda:	4b6f      	ldr	r3, [pc, #444]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6e      	ldr	r2, [pc, #440]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff f949 	bl	800107c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff f945 	bl	800107c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e255      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e00:	4b65      	ldr	r3, [pc, #404]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b62      	ldr	r3, [pc, #392]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	495f      	ldr	r1, [pc, #380]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b5d      	ldr	r3, [pc, #372]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5c      	ldr	r2, [pc, #368]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f925 	bl	800107c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff f921 	bl	800107c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e231      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e48:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03c      	beq.n	8001eda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff f900 	bl	800107c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7ff f8fc 	bl	800107c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e20c      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ef      	beq.n	8001e80 <HAL_RCC_OscConfig+0x3ec>
 8001ea0:	e01b      	b.n	8001eda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff f8e3 	bl	800107c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff f8df 	bl	800107c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1ef      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ecc:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ef      	bne.n	8001eba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80a6 	beq.w	8002034 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eec:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10d      	bne.n	8001f14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_RCC_OscConfig+0x508>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d118      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f20:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_RCC_OscConfig+0x508>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	@ (8001f9c <HAL_RCC_OscConfig+0x508>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f8a6 	bl	800107c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7ff f8a2 	bl	800107c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1b2      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_RCC_OscConfig+0x508>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4d8>
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f6a:	e029      	b.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d115      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x50c>
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7a:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	4a03      	ldr	r2, [pc, #12]	@ (8001f98 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f94:	e014      	b.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	4b9a      	ldr	r3, [pc, #616]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	4a99      	ldr	r2, [pc, #612]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb0:	4b96      	ldr	r3, [pc, #600]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb6:	4a95      	ldr	r2, [pc, #596]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d016      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f858 	bl	800107c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f854 	bl	800107c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e162      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	4b89      	ldr	r3, [pc, #548]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ed      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x53c>
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f841 	bl	800107c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f83d 	bl	800107c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e14b      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002014:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ed      	bne.n	8001ffe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b78      	ldr	r3, [pc, #480]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	4a77      	ldr	r2, [pc, #476]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002032:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d03c      	beq.n	80020ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01c      	beq.n	8002082 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002048:	4b70      	ldr	r3, [pc, #448]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 800204a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800204e:	4a6f      	ldr	r2, [pc, #444]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7ff f810 	bl	800107c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002060:	f7ff f80c 	bl	800107c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e11c      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002072:	4b66      	ldr	r3, [pc, #408]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ef      	beq.n	8002060 <HAL_RCC_OscConfig+0x5cc>
 8002080:	e01b      	b.n	80020ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002082:	4b62      	ldr	r3, [pc, #392]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002088:	4a60      	ldr	r2, [pc, #384]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7fe fff3 	bl	800107c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209a:	f7fe ffef 	bl	800107c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0ff      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020ac:	4b57      	ldr	r3, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80020ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ef      	bne.n	800209a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80f3 	beq.w	80022aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f040 80c9 	bne.w	8002260 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ce:	4b4f      	ldr	r3, [pc, #316]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0203 	and.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	429a      	cmp	r2, r3
 80020e0:	d12c      	bne.n	800213c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	3b01      	subs	r3, #1
 80020ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d123      	bne.n	800213c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d11b      	bne.n	800213c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d113      	bne.n	800213c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d109      	bne.n	800213c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d06b      	beq.n	8002214 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d062      	beq.n	8002208 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0ac      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002152:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800215e:	f7fe ff8d 	bl	800107c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe ff89 	bl	800107c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e099      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_RCC_OscConfig+0x77c>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002194:	3a01      	subs	r2, #1
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021b2:	0852      	lsrs	r2, r2, #1
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0652      	lsls	r2, r2, #25
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021be:	06d2      	lsls	r2, r2, #27
 80021c0:	430a      	orrs	r2, r1
 80021c2:	4912      	ldr	r1, [pc, #72]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021c8:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0f      	ldr	r2, [pc, #60]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e0:	f7fe ff4c 	bl	800107c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe ff48 	bl	800107c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e058      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002206:	e050      	b.n	80022aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e04f      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
 800220c:	40021000 	.word	0x40021000
 8002210:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d144      	bne.n	80022aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002220:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a23      	ldr	r2, [pc, #140]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002238:	f7fe ff20 	bl	800107c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ff1c 	bl	800107c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e02c      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x7ac>
 800225e:	e024      	b.n	80022aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d01f      	beq.n	80022a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 800226c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe ff03 	bl	800107c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe feff 	bl	800107c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e00f      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4905      	ldr	r1, [pc, #20]	@ (80022b4 <HAL_RCC_OscConfig+0x820>)
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_RCC_OscConfig+0x824>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	60cb      	str	r3, [r1, #12]
 80022a4:	e001      	b.n	80022aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	feeefffc 	.word	0xfeeefffc

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0e7      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b75      	ldr	r3, [pc, #468]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d910      	bls.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b72      	ldr	r3, [pc, #456]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4970      	ldr	r1, [pc, #448]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b6e      	ldr	r3, [pc, #440]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cf      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d010      	beq.n	800232e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b66      	ldr	r3, [pc, #408]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002318:	429a      	cmp	r2, r3
 800231a:	d908      	bls.n	800232e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b63      	ldr	r3, [pc, #396]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4960      	ldr	r1, [pc, #384]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d04c      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	4b5a      	ldr	r3, [pc, #360]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d121      	bne.n	8002392 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0a6      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b54      	ldr	r3, [pc, #336]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d115      	bne.n	8002392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e09a      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002372:	4b4e      	ldr	r3, [pc, #312]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e08e      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002382:	4b4a      	ldr	r3, [pc, #296]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e086      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b46      	ldr	r3, [pc, #280]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4943      	ldr	r1, [pc, #268]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a4:	f7fe fe6a 	bl	800107c <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fe66 	bl	800107c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e06e      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d010      	beq.n	8002402 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d208      	bcs.n	8002402 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b2e      	ldr	r3, [pc, #184]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	492b      	ldr	r1, [pc, #172]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002402:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d210      	bcs.n	8002432 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	4923      	ldr	r1, [pc, #140]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e036      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4918      	ldr	r1, [pc, #96]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4910      	ldr	r1, [pc, #64]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002470:	f000 f824 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	490b      	ldr	r1, [pc, #44]	@ (80024b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <HAL_RCC_ClockConfig+0x1f8>)
 800248e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fda1 	bl	8000fdc <HAL_InitTick>
 800249a:	4603      	mov	r3, r0
 800249c:	72fb      	strb	r3, [r7, #11]

  return status;
 800249e:	7afb      	ldrb	r3, [r7, #11]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40021000 	.word	0x40021000
 80024b0:	0800323c 	.word	0x0800323c
 80024b4:	2000000c 	.word	0x2000000c
 80024b8:	20000010 	.word	0x20000010

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ca:	4b3e      	ldr	r3, [pc, #248]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d4:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d121      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d11e      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024f0:	4b34      	ldr	r3, [pc, #208]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024fc:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e005      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002518:	4a2b      	ldr	r2, [pc, #172]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d102      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	e004      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d101      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002542:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d134      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0xa6>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d003      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0xac>
 8002560:	e005      	b.n	800256e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002564:	617b      	str	r3, [r7, #20]
      break;
 8002566:	e005      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800256a:	617b      	str	r3, [r7, #20]
      break;
 800256c:	e002      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	617b      	str	r3, [r7, #20]
      break;
 8002572:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002574:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	3301      	adds	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	fb03 f202 	mul.w	r2, r3, r2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	0e5b      	lsrs	r3, r3, #25
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	3301      	adds	r3, #1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025b4:	69bb      	ldr	r3, [r7, #24]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	0800324c 	.word	0x0800324c
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	007a1200 	.word	0x007a1200

080025d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025ec:	f7ff f9ee 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 80025f0:	6178      	str	r0, [r7, #20]
 80025f2:	e014      	b.n	800261e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002600:	4b22      	ldr	r3, [pc, #136]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800260c:	f7ff f9de 	bl	80019cc <HAL_PWREx_GetVoltageRange>
 8002610:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002624:	d10b      	bne.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b80      	cmp	r3, #128	@ 0x80
 800262a:	d919      	bls.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002630:	d902      	bls.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002632:	2302      	movs	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e013      	b.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e010      	b.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	@ 0x80
 8002642:	d902      	bls.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002644:	2303      	movs	r3, #3
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e00a      	b.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	@ 0x80
 800264e:	d102      	bne.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002650:	2302      	movs	r3, #2
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e004      	b.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b70      	cmp	r3, #112	@ 0x70
 800265a:	d101      	bne.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 0207 	bic.w	r2, r3, #7
 8002668:	4909      	ldr	r1, [pc, #36]	@ (8002690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e095      	b.n	80027d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026b6:	d009      	beq.n	80026cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
 80026be:	e005      	b.n	80026cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fb8c 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800270c:	d902      	bls.n	8002714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e002      	b.n	800271a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002722:	d007      	beq.n	8002734 <HAL_SPI_Init+0xa0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	ea42 0103 	orr.w	r1, r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	f003 0204 	and.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027b0:	ea42 0103 	orr.w	r1, r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ea:	f7fe fc47 	bl	800107c <HAL_GetTick>
 80027ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d001      	beq.n	8002804 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	e15c      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_SPI_Transmit+0x36>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e154      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_SPI_Transmit+0x48>
 800281e:	2302      	movs	r3, #2
 8002820:	e14d      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002874:	d10f      	bne.n	8002896 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a0:	2b40      	cmp	r3, #64	@ 0x40
 80028a2:	d007      	beq.n	80028b4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028bc:	d952      	bls.n	8002964 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_SPI_Transmit+0xf2>
 80028c6:	8b7b      	ldrh	r3, [r7, #26]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d145      	bne.n	8002958 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	1c9a      	adds	r2, r3, #2
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028f0:	e032      	b.n	8002958 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d112      	bne.n	8002926 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	1c9a      	adds	r2, r3, #2
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002924:	e018      	b.n	8002958 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002926:	f7fe fba9 	bl	800107c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d803      	bhi.n	800293e <HAL_SPI_Transmit+0x164>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800293c:	d102      	bne.n	8002944 <HAL_SPI_Transmit+0x16a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0b2      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1c7      	bne.n	80028f2 <HAL_SPI_Transmit+0x118>
 8002962:	e083      	b.n	8002a6c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_SPI_Transmit+0x198>
 800296c:	8b7b      	ldrh	r3, [r7, #26]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d177      	bne.n	8002a62 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d912      	bls.n	80029a2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	881a      	ldrh	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	1c9a      	adds	r2, r3, #2
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b02      	subs	r3, #2
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029a0:	e05f      	b.n	8002a62 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80029c8:	e04b      	b.n	8002a62 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d12b      	bne.n	8002a30 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d912      	bls.n	8002a08 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b02      	subs	r3, #2
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a06:	e02c      	b.n	8002a62 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a2e:	e018      	b.n	8002a62 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a30:	f7fe fb24 	bl	800107c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d803      	bhi.n	8002a48 <HAL_SPI_Transmit+0x26e>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_Transmit+0x274>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e02d      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ae      	bne.n	80029ca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fb65 	bl	8003140 <SPI_EndRxTxTransaction>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08a      	sub	sp, #40	@ 0x28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad8:	f7fe fad0 	bl	800107c <HAL_GetTick>
 8002adc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ae4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d00c      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x4e>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b00:	d106      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x4a>
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d001      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
 8002b12:	e1f3      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x60>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x60>
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1e8      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x72>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e1e1      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d003      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b96:	d802      	bhi.n	8002b9e <HAL_SPI_TransmitReceive+0xd8>
 8002b98:	8abb      	ldrh	r3, [r7, #20]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d908      	bls.n	8002bb0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e007      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b40      	cmp	r3, #64	@ 0x40
 8002bcc:	d007      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002be6:	f240 8083 	bls.w	8002cf0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x132>
 8002bf2:	8afb      	ldrh	r3, [r7, #22]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d16f      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	1c9a      	adds	r2, r3, #2
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1c:	e05c      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d11b      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x19e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x19e>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d113      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11c      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x1e6>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cac:	f7fe f9e6 	bl	800107c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d80d      	bhi.n	8002cd8 <HAL_SPI_TransmitReceive+0x212>
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cc2:	d009      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e111      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d19d      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x158>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d197      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x158>
 8002cee:	e0e5      	b.n	8002ebc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x23a>
 8002cf8:	8afb      	ldrh	r3, [r7, #22]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 80d1 	bne.w	8002ea2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d912      	bls.n	8002d30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	1c9a      	adds	r2, r3, #2
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b02      	subs	r3, #2
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d56:	e0a4      	b.n	8002ea2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d134      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x30a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02f      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x30a>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d12c      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d912      	bls.n	8002da6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b02      	subs	r3, #2
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002da4:	e012      	b.n	8002dcc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d148      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x3aa>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d042      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d923      	bls.n	8002e3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	b292      	uxth	r2, r2
 8002e02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b02      	subs	r3, #2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d81f      	bhi.n	8002e6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	e016      	b.n	8002e6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f103 020c 	add.w	r2, r3, #12
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e70:	f7fe f904 	bl	800107c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d803      	bhi.n	8002e88 <HAL_SPI_TransmitReceive+0x3c2>
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e86:	d102      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x3c8>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e02c      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f af55 	bne.w	8002d58 <HAL_SPI_TransmitReceive+0x292>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f af4e 	bne.w	8002d58 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f93d 	bl	8003140 <SPI_EndRxTxTransaction>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00e      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	@ 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f14:	f7fe f8b2 	bl	800107c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f24:	f7fe f8aa 	bl	800107c <HAL_GetTick>
 8002f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	0d1b      	lsrs	r3, r3, #20
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3a:	e054      	b.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f42:	d050      	beq.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f44:	f7fe f89a 	bl	800107c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d902      	bls.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d13d      	bne.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f72:	d111      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7c:	d004      	beq.n	8002f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d107      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa0:	d10f      	bne.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e017      	b.n	8003006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	429a      	cmp	r2, r3
 8003002:	d19b      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c

08003014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003026:	f7fe f829 	bl	800107c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	4413      	add	r3, r2
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003036:	f7fe f821 	bl	800107c <HAL_GetTick>
 800303a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003044:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00da      	lsls	r2, r3, #3
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	0d1b      	lsrs	r3, r3, #20
 8003054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800305c:	e060      	b.n	8003120 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003064:	d107      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003074:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800307c:	d050      	beq.n	8003120 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800307e:	f7fd fffd 	bl	800107c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <SPI_WaitFifoStateUntilTimeout+0x80>
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13d      	bne.n	8003110 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ac:	d111      	bne.n	80030d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b6:	d004      	beq.n	80030c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c0:	d107      	bne.n	80030d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030da:	d10f      	bne.n	80030fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e010      	b.n	8003132 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	3b01      	subs	r3, #1
 800311e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d196      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	@ 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c

08003140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff ff5b 	bl	8003014 <SPI_WaitFifoStateUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e027      	b.n	80031c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff fec0 	bl	8002f04 <SPI_WaitFlagStateUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e014      	b.n	80031c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff ff34 	bl	8003014 <SPI_WaitFifoStateUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e000      	b.n	80031c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <memset>:
 80031cc:	4402      	add	r2, r0
 80031ce:	4603      	mov	r3, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d0d      	ldr	r5, [pc, #52]	@ (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003218 <__libc_init_array+0x3c>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2600      	movs	r6, #0
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4d0b      	ldr	r5, [pc, #44]	@ (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 f818 	bl	8003224 <_init>
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2600      	movs	r6, #0
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	0800327c 	.word	0x0800327c
 8003218:	0800327c 	.word	0x0800327c
 800321c:	0800327c 	.word	0x0800327c
 8003220:	08003280 	.word	0x08003280

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
